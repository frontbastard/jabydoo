services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py create_superuser &&
             python manage.py create_trust_pages &&
             python manage.py collectstatic --noinput &&
             gunicorn site_service.wsgi:application --bind unix:/var/www/${SITE_DOMAIN}/app.sock"
    environment:
      - DJANGO_SETTINGS_MODULE=site_service.settings
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env

#  nginx:
#    build: ./nginx
#    container_name: nginx
#    volumes:
#      - /etc/letsencrypt/live/${SITE_DOMAIN}:/etc/letsencrypt/live/${SITE_DOMAIN}:ro
#      - /etc/letsencrypt/archive/${SITE_DOMAIN}:/etc/letsencrypt/archive/${SITE_DOMAIN}:ro
#      - static_volume:/home/app/web/staticfiles
#      - media_volume:/home/app/web/mediafiles
#      - ./nginx/nginx.template:/etc/nginx/nginx.template
#    env_file:
#      - .env
#    command: /bin/sh -c "envsubst '$$SITE_DOMAIN$' < /etc/nginx/nginx.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - web
#    networks:
#      - internal_network

#  certbot:
#    image: certbot/certbot
#    container_name: certbot
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/entrypoint.sh:/var/www/certbot/entrypoint.sh
#    env_file:
#      - .env
#    entrypoint: ["/bin/sh", "-c", "chmod +x /var/www/certbot/entrypoint.sh && /var/www/certbot/entrypoint.sh"]

volumes:
  postgres_data:
  static_volume:
  media_volume:
